from record_model import RecordModel
from repository import WalletRepository


class WalletService:
    def __init__(self):
        self.repository = WalletRepository()
        self.commands = {
            "–±–∞–ª–∞–Ω—Å": self._get_balance,
            "–∏—Å—Ç–æ—Ä–∏—è": self._get_records,
            "–¥–æ—Ö–æ–¥": self._add_record,
            "—Ä–∞—Å—Ö–æ–¥": self._add_record,
            "–∏–∑–º–µ–Ω–∏—Ç—å": self._update_record,
            "—É–¥–∞–ª–∏—Ç—å": self._delete_record,
        }

    def __call__(self, request: str) -> None:
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."""
        request = request.lower()
        try:
            response = self._validate_request(request)
            if type(response) is str:
                print(response)
            elif type(response) is list:
                if len(response) > 0:
                    self._print_title()
                    for record in response:
                        print(record)
                else:
                    print("–ü—É—Å—Ç–æ")
        except UserWarning as warning:
            print(warning)

    def _validate_request(self, request) -> list | str | None:
        """–ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ."""
        try:
            return self.commands[request.split()[0]](request)
        except KeyError:
            raise UserWarning("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")

    def _get_balance(self, *args) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞."""
        balance = self.repository.get_balance()['–±–∞–ª–∞–Ω—Å']
        incomes = self.repository.get_balance()['–¥–æ—Ö–æ–¥—ã']
        expenses = self.repository.get_balance()['—Ä–∞—Å—Ö–æ–¥—ã']

        return f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: üíµ{balance}. –î–æ—Ö–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É üíµ{incomes}, —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É üíµ{expenses}."

    def _get_records(self, request: str) -> list[RecordModel]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ –∫–ª—é—á–∞–º."""
        if len(request.split()) < 2:
            return self.repository.get_records()
        elif request.split()[1] in ("–¥–æ—Ö–æ–¥", "–¥–æ—Ö–æ–¥–æ–≤", "–¥–æ—Ö–æ–¥—ã"):
            return self.repository.get_records(category="–¥–æ—Ö–æ–¥")
        elif request.split()[1] in ("—Ä–∞—Å—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥–æ–≤", "—Ä–∞—Å—Ö–æ–¥—ã"):
            return self.repository.get_records(category="—Ä–∞—Å—Ö–æ–¥")
        elif request.split()[1].isdigit():
            return self.repository.get_records(value=int(request.split()[1]))
        elif "–¥–∞—Ç–∞" in request.split()[1]:
            return self.repository.get_records(date=request.split()[1].split("=")[-1])
        else:
            return self.repository.get_records(description=request.split()[1])

    def _add_record(self, request: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–∞—Ö/—Ä–∞—Å—Ö–æ–¥–∞—Ö –≤ –∫–æ—à–µ–ª—ë–∫."""
        try:
            category, value, date, *description = request.split()
        except ValueError:
            raise UserWarning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.")
        description = " ".join(description)
        try:
            new_record = RecordModel(category=category, value=value, date=date, description=description)
        except ValueError as e:
            raise UserWarning(e)
        else:
            record = self.repository.add(record=new_record)
            return f"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {record}"

    def _update_record(self, request: str) -> str:
        """–ò–∑–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤ –∫–æ—à–µ–ª—å–∫–µ –ø–æ –µ—ë id."""
        try:
            id, category, value, date, *description = request.split()[1::]
        except ValueError:
            raise UserWarning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.")
        description = " ".join(description)
        try:
            record = RecordModel(id=id, category=category, value=value, date=date, description=description)
            return f"–ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {self.repository.update(record)}"
        except ValueError as e:
            raise UserWarning(e)

    def _delete_record(self, request: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–∞—Ö/—Ä–∞—Å—Ö–æ–¥–∞—Ö –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ id."""
        try:
            id = int(request.split()[1])
        except IndexError:
            raise UserWarning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.")
        except ValueError:
            raise UserWarning("–ù–µ–≤–µ—Ä–Ω—ã–π id.")
        try:
            return f"–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: {self.repository.delete(id)}"
        except ValueError as e:
            raise UserWarning(e)

    @staticmethod
    def _print_title():
        """–ü–µ—á–∞—Ç–∞–µ—Ç —à–∞–ø–∫—É."""
        print("id".center(4) + "|" + "—Å—É–º–º–∞".center(7) + "|" + "–¥–∞—Ç–∞".center(12) + "|" + " –æ–ø–∏—Å–∞–Ω–∏–µ")
